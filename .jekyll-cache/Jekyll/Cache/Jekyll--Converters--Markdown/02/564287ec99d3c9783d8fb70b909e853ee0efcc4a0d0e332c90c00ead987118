I"чи<h1 id="lab1-Е┼═ФЁ∙Е≥╗Г■╣Х╥╞Х╝╬Х╝║">Lab1: Е┼═ФЁ∙Е≥╗Г■╣Х╥╞Х╝╬Х╝║</h1>

<p>Е°╗Ф°╛Ф√┤Д╦╜, Ф┬▒Д╩╛Е╟├Е÷╨Д╨▌ <code class="language-plaintext highlighter-rouge">Ch1, Ch2</code> Ф┴─Е╜╕Г÷╔Х╞├, Ф░╜Е╩╨Е╝▄Ф┬░Д╨▄Х©⌡Е┬╤Е┘╗Е┼═Е≥╗Г └Г■╣Х╥╞Х╝╬Х╝║, Е╧╤Д╩╔Ф╜╓Д╦╨Е÷╨Г║─Е╝·Г▌╟ $4$ Д╫█, $16$ Д╫█Х║▄ФЁ╒Х©⌡Д╫█Е┘╗Е┼═Е≥╗Г └Х╝╬Х╝║Е▓▄Г■╣Х╥╞И─╩Х╬▒Е┼÷Х┐╫Ф╣▀Х╞∙.</p>

<h2 id="Е┘╗Е┼═Е≥╗">Е┘╗Е┼═Е≥╗</h2>
<p>Ф┬▒Д╩╛Е▐╞Д╩╔Д╫©Г■╗Х©·Г╩╜Х╣▀Е─╪Е©╚И─÷Е°╟Е╝ Д╧┴Д╦─Д╦╙Е┘╗Е┼═Е≥╗. Д╫├Ф≤╞Е╓└Д╨▌Ф∙≥Е╜╕Г⌡╝Г └, Ф┬▒Д╩╛Ф ┌Д╦■Д╦█Х©≥Д╧┬Е│ , Х─▄Ф≤╞Д╩▌Г°÷Е─╪Х║╗Е╪─Е╖▀Х©⌡Х║▄Г■╣Х╥╞Е┬├Ф·░, Е╧╤Д╫©Г■╗Д╦▌И≈╗, Ф┬√И≈╗, Е╪┌Ф┬√И≈╗Ф░╜Е╩╨Е┘╗Е┼═Е≥╗:
И╕√Е┘┬Х─┐Х≥▒Е▄┘Е░╚Х©⌡Д╫█Г └Д╨▄Х©⌡Е┬╤Е┼═ФЁ∙. Д╦█Е╕╗Х╝╬Х╬⌠Е┘╔Д╦╨ <code class="language-plaintext highlighter-rouge">x, y, c_in</code>, Ф°─Г╩┬Ф∙╟Ф█╝Д╫█Х╬⌠Е┤╨Д╦╨ <code class="language-plaintext highlighter-rouge">(x XOR y) XOR c_in</code>, carryД╫█Х╬⌠Е┤╨Д╦╨ <code class="language-plaintext highlighter-rouge">((x XOR y)AND c_in) or (x AND y)</code>. Г■╣Х╥╞Е⌡╬Е╕┌Д╦▀Ф┴─Г╓╨:</p>

<p><img src="https://cdn.jsdelivr.net/gh/KirisameMarisaa/KirisameMarisaa.github.io/img/blogpost_images/20201105193753.png" alt="20201105193753" /></p>

<p>Д╬²Ф█╝Д╦┼Х©╟Е▌÷Г░├, Г╪√Е├≥ <code class="language-plaintext highlighter-rouge">Verilog</code> Г╗▀Е╨▐Е╕┌Д╦▀:</p>
<div class="language-verilog highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="rouge-code"><pre><span class="c1">// Full adder design using verilog primitive gates</span>

<span class="c1">// All gates have a 1ns delay (#1 = 1ns)</span>
<span class="cp">`timescale</span> <span class="mi">1</span><span class="n">ns</span><span class="o">/</span><span class="mi">100</span><span class="n">ps</span>

<span class="cp">`default_nettype</span> <span class="n">none</span>

<span class="c1">//Module definition</span>

<span class="k">module</span> <span class="n">full_adder</span><span class="p">(</span><span class="kt">input</span>  <span class="kt">wire</span>  <span class="n">a</span><span class="p">,</span> 
                  <span class="kt">input</span>  <span class="kt">wire</span>  <span class="n">b</span><span class="p">,</span> 
                  <span class="kt">input</span>  <span class="kt">wire</span>  <span class="n">cin</span><span class="p">,</span> 
                  <span class="kt">output</span> <span class="kt">wire</span>  <span class="n">s</span><span class="p">,</span> 
                  <span class="kt">output</span> <span class="kt">wire</span>  <span class="n">cout</span><span class="p">);</span>

<span class="c1">//Internal connections should be specified here</span>
<span class="kt">wire</span> <span class="n">axorb</span><span class="p">;</span>     <span class="c1">// will be a^b</span>
<span class="kt">wire</span> <span class="n">ab</span><span class="p">;</span>        <span class="c1">// will be a.b</span>
<span class="kt">wire</span> <span class="n">cin_axorb</span><span class="p">;</span> <span class="c1">// will be cin.(a^b)</span>


<span class="c1">// Sum logic for full adder s=(a^b)^cin</span>
<span class="c1">//</span>
<span class="kt">xor</span> <span class="p">#</span><span class="mi">1</span> <span class="n">gate1</span> <span class="p">(</span><span class="n">axorb</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
<span class="kt">xor</span> <span class="p">#</span><span class="mi">1</span> <span class="n">gate2</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">cin</span><span class="p">,</span> <span class="n">axorb</span><span class="p">);</span>

<span class="c1">// Carry logic for full adder cout=cin.(a^b) + a.b</span>
<span class="c1">//</span>
<span class="kt">and</span> <span class="p">#</span><span class="mi">1</span> <span class="n">gate3</span><span class="p">(</span><span class="n">ab</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
<span class="kt">and</span> <span class="p">#</span><span class="mi">1</span> <span class="n">gate4</span><span class="p">(</span><span class="n">cin_axorb</span><span class="p">,</span> <span class="n">cin</span><span class="p">,</span> <span class="n">axorb</span><span class="p">);</span>
<span class="kt">or</span> <span class="p">#</span><span class="mi">1</span> <span class="n">gate5</span><span class="p">(</span><span class="n">cout</span><span class="p">,</span> <span class="n">cin_axorb</span><span class="p">,</span> <span class="n">ab</span><span class="p">);</span>



<span class="k">endmodule</span> 

<span class="cp">`default_nettype</span> <span class="kt">wire</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Verilog Ф≤╞Г║╛Д╩╤Ф▐▐Х©╟Х╞╜Х╗─, Ф°╛Х╢╗Ф≤╞Е╞╧Х╕│Е╝ Д╧┴Г └Г■╣Х╥╞Е⌡╬Ф┬√Х╝╬Х╝║Г └Ф√┤Е╜≈Е▄√Ф▐▐Х©╟. Е╝┐Д╩╔Ф╗║Г╩└Д╦╨Е÷╨Ф°╛Е█∙Д╫█, Е╝ Д╧┴Х╬⌠Е┘╔, Х╬⌠Е┤╨Д╩╔Е▐┼Е╞╧Х╬⌠Е┘╔Д©║Е▐╥Г └Е╓└Г░├Ф√╧ФЁ∙. Е°╗Д╦┼Х©╟Д╩ёГ═│Д╦╜, Ф┬▒Д╩╛Е╝ Д╧┴И─╩Х╬▒И≈╗Г └Х╬⌠Е┘╔, Х©░Г╝≈Е▓▄Х╬⌠Е┤╨, Е╧╤Её╟Ф≤▌Г⌡╦Е┘ЁГ └Х╬⌠Е┘╔/Х╬⌠Е┤╨Д©║Е▐╥Д╦╨ <code class="language-plaintext highlighter-rouge">wire</code> Ф∙╟Ф█╝Г╠╩Е·▀. Е╞╧Г╨©Х╥╞Г └Е╝ Д╧┴Д╦█Х─┐Х≥▒Е┘┬Е░▌И║╨Е╨▐И≈╝И╒≤, Х─▄Е┘ЁФЁ╗Е╝┐Г └И─╩Х╬▒Г╩⌠Ф·└. Г■╣Х╥╞Ф°╛Х╢╗Д╦┼Е╟╠Ф≤╞Е╧╤Х║▄Г └.</p>

<p>Х╕│Е╞╧Ф┴─Е╝ Д╧┴Г └Г■╣Х╥╞Х©⌡Х║▄Ф╣▀Х╞∙, Ф┬▒Д╩╛Е╟╠И°─Х╕│Д╫©Г■╗Ф▌╖Е┬╤Е▐≤И┤▐ФЁ∙, Д╬²Ф╛║Ф╣▀Х╞∙Ф╗║Г╩└Ф┴─Ф°┴Г └Х╬⌠Е┘╔Е▓▄Х╬⌠Е┤╨, Д╩╔Е▐┼Ф╗║Г╩└И≈╢Х©·Г╨©. Е°╗Е┘╗Е┼═Е≥╗Ф╗║Г╩└Д╦╜, Г■╠Д╨▌Д╦█Е╜≤Е°╗Д╦╜И≈╢Х©·Г╨©, Ф┬▒Д╩╛Е▐╙И°─Х╕│Ф╣▀Х╞∙Д╦┴Ф²║Х╬⌠Е┘╔Е▓▄Д╦╓Ф²║Х╬⌠Е┤╨Е█ЁЕ▐╞. Ф╣▀Х╞∙Д╩ёГ═│Е╕┌Д╦▀:</p>

<div class="language-verilog highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="rouge-code"><pre><span class="c1">// Full adder testbench</span>

<span class="c1">// #1 = 1ns</span>
<span class="cp">`timescale</span> <span class="mi">1</span><span class="n">ns</span><span class="o">/</span><span class="mi">100</span><span class="n">ps</span> 

<span class="k">module</span> <span class="n">full_adder_tb</span><span class="p">();</span>

<span class="c1">// Internal connections</span>
<span class="kt">reg</span> <span class="n">a</span><span class="p">;</span>
<span class="kt">reg</span> <span class="n">b</span><span class="p">;</span>
<span class="kt">reg</span> <span class="n">cin</span><span class="p">;</span>
<span class="kt">wire</span> <span class="n">s</span><span class="p">;</span>
<span class="kt">wire</span> <span class="n">cout</span><span class="p">;</span>

<span class="c1">// Instantiate full adder as dut (device under test)</span>

<span class="n">full_adder</span> <span class="n">dut</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">cin</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">cout</span><span class="p">);</span>

<span class="c1">// Test vectors</span>
<span class="c1">// All combinations required </span>
<span class="k">initial</span>
 <span class="k">begin</span>
  <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">cin</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">#</span><span class="mi">100</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">#</span><span class="mi">100</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">#</span><span class="mi">100</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">#</span><span class="mi">100</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">cin</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">#</span><span class="mi">100</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">#</span><span class="mi">100</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">#</span><span class="mi">100</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">#</span><span class="mi">100</span> <span class="p">$</span><span class="nb">finish</span><span class="p">;</span> <span class="c1">// exit the simulation</span>
 <span class="k">end</span>

<span class="c1">// Save results as VCD file </span>

<span class="k">initial</span>
 <span class="k">begin</span>
  <span class="p">$</span><span class="nb">dumpfile</span><span class="p">(</span><span class="s">"full_adder_tb_results.vcd"</span><span class="p">);</span>  <span class="c1">// Save simulation waveforms in this file</span>
  <span class="p">$</span><span class="nb">dumpvars</span><span class="p">;</span> <span class="c1">// Capture all simulation waveforms</span>
 <span class="k">end</span>

<span class="k">endmodule</span> 
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Д╦▀И²╒, Ф┬▒Д╩╛И°─Х╕│Д╫©Г■╗Е▒╫Д╩╓Х║▄Г╪√Х╞▒Е╥╔Е┘╥ <code class="language-plaintext highlighter-rouge">iverilog</code> Е▓▄ФЁ╒Е╫╒Ф÷╔Г°▀Е≥╗ <code class="language-plaintext highlighter-rouge">GTKWave</code> Е╞╧Х╝╬Х╝║Х©⌡Х║▄Фё─И╙▄: (Г╝─Д╬©Х╣╥Х╖│, Ф°╛Ф√┤Д╫©Г■╗ <code class="language-plaintext highlighter-rouge">VSCode</code> Г └ <code class="language-plaintext highlighter-rouge">Verilog</code> ФЁ╒Е╫╒Ф▐▓Д╩╤Ф÷╔Г°▀ФЁ╒Е╫╒)</p>

<div class="language-verilog highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1">// compile the file</span>
<span class="n">iverilog</span> <span class="o">-</span><span class="n">y</span><span class="p">.</span> <span class="o">-</span><span class="n">o</span> <span class="n">full_adder_output</span> <span class="n">full_adder_tb</span><span class="p">.</span><span class="n">v</span> <span class="n">full_adder</span><span class="p">.</span><span class="n">v</span>

<span class="c1">// dump the .vcd file to the directory</span>
<span class="n">vvp</span> <span class="n">full_adder_output</span>

<span class="c1">// use gtkwave to open the .vcd file</span>
<span class="n">gtkwave</span> <span class="n">full_adder_tb_results</span><span class="p">.</span><span class="n">vcd</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Х╖┌Е╞÷Ф√┤Д╩╤Е╓╢Г └И≈╗Г╨╖Е╩╤Х©÷ФЁ╒Е╫╒, Е▐╞Г°▀Е┬╟Ф≤▌Ф≤╬Е╪┌Е╦╦: Е╝·И≥┘Д╦┼ <code class="language-plaintext highlighter-rouge">cout</code> Д©║Е▐╥Г └Х╝║Г╝≈И°─Х╕│Г╩▐Х©┤Д╦┴И┤█И─╩Х╬▒И≈╗, Е┘╤Е╩╤Х©÷Е╨■Х╞╔Д╦╨ <code class="language-plaintext highlighter-rouge">3ns</code>. Х─▄И²· <code class="language-plaintext highlighter-rouge">2ns</code>:</p>

<p><img src="https://cdn.jsdelivr.net/gh/KirisameMarisaa/KirisameMarisaa.github.io/img/blogpost_images/20201105193827.png" alt="20201105193827" /></p>

<p>Г╩▐Х©┤Х╝╗Х╝╨Е▓▄Е┬├Ф·░Е╬≈Г÷╔, VerilogЕ╞╧И─╩Х╬▒И≈╗Г └Ф╗║Ф▀÷Ф≤╞Е÷╨Д╨▌И─╩Х╬▒Х─▄И²·Г■╣Х╥╞Г └, Е╜≤Е°╗Б─°Г÷╜Х╥╞Г┴╧Ф─╖Б─². Е°╗Х╞╔Д╬▀Д╦╜, Г■╠Д╨▌Х╬⌠Е┘╔ <code class="language-plaintext highlighter-rouge">c_in == 0</code>, Д╨▄Г╨╖И─╩Х╬▒И≈╗Х╒╚Г÷╜Х╥╞, <code class="language-plaintext highlighter-rouge">cin_axorb</code> Х╬⌠Е┤╨Е©┘Д╦╨ <code class="language-plaintext highlighter-rouge">0</code>, Ф∙┘Д╦▌И≈╗Д╦█Е├█Г╜┴Е─≥Е┘╤Е╪┌Ф┬√Х╬⌠Е┤╨Х─▄Г⌡╢Ф▌╔Х╬⌠Е┤╨Г╩⌠Ф·°, Ф∙┘Е╝·И≥┘Е╩╤Х©÷Д╩┘Д╦╨ <code class="language-plaintext highlighter-rouge">2ns</code>.</p>

<p><br /></p>

<h2 id="4-Д╫█Х║▄ФЁ╒Х©⌡Д╫█Е┼═ФЁ∙Е≥╗">$4$ Д╫█Х║▄ФЁ╒Х©⌡Д╫█Е┼═ФЁ∙Е≥╗</h2>
<p>Е÷╨Д╨▌Е┘╗Е┼═Е≥╗Г └Х╝╬Х╝║, Е▐╞Г╝─Е█∙Е╪∙Г■╗Е┘╗Е┼═Е≥╗Е╟├Е┘╤Х©⌡Х║▄Д╦╡Х│■, Е█ЁЕ▐╞Е╬≈Д╦─Д╦╙ $4$ Д╫█Х║▄ФЁ╒Х©⌡Д╫█Е┼═ФЁ∙Е≥╗:</p>

<div class="language-verilog highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="c1">// 4-bit adder design using verilog primitive gates</span>


<span class="cp">`timescale</span> <span class="mi">1</span><span class="n">ns</span><span class="o">/</span><span class="mi">100</span><span class="n">ps</span>


<span class="cp">`default_nettype</span> <span class="n">none</span>

<span class="c1">//Module definition</span>

<span class="k">module</span> <span class="n">adder_4bit</span><span class="p">(</span><span class="kt">input</span>  <span class="kt">wire</span> <span class="p">[</span><span class="mi">3</span><span class="o">:</span><span class="mi">0</span><span class="p">]</span>  <span class="n">a</span><span class="p">,</span> 
                  <span class="kt">input</span>  <span class="kt">wire</span> <span class="p">[</span><span class="mi">3</span><span class="o">:</span><span class="mi">0</span><span class="p">]</span>  <span class="n">b</span><span class="p">,</span> 
                  <span class="kt">input</span>  <span class="kt">wire</span>        <span class="n">cin</span><span class="p">,</span> 
                  <span class="kt">output</span> <span class="kt">wire</span> <span class="p">[</span><span class="mi">3</span><span class="o">:</span><span class="mi">0</span><span class="p">]</span>  <span class="n">s</span><span class="p">,</span> 
                  <span class="kt">output</span> <span class="kt">wire</span>        <span class="n">cout</span><span class="p">);</span>


<span class="c1">//Internal carry connections</span>
<span class="kt">wire</span> <span class="n">c0</span><span class="p">;</span>    <span class="c1">// carry out bit 0 adder</span>
<span class="kt">wire</span> <span class="n">c1</span><span class="p">;</span>    <span class="c1">// carry out bit 1 adder</span>
<span class="kt">wire</span> <span class="n">c2</span><span class="p">;</span>    <span class="c1">// carry out bit 2 adder</span>

<span class="c1">// Instantiate 4 x full_adder</span>
<span class="n">full_adder</span> <span class="n">adder0</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">cin</span><span class="p">,</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">c0</span><span class="p">);</span>
<span class="n">full_adder</span> <span class="n">adder1</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">c0</span><span class="p">,</span> <span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">c1</span><span class="p">);</span>
<span class="n">full_adder</span> <span class="n">adder2</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">c1</span><span class="p">,</span> <span class="n">s</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">c2</span><span class="p">);</span>
<span class="n">full_adder</span> <span class="n">adder3</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">c2</span><span class="p">,</span> <span class="n">s</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">cout</span><span class="p">);</span>


<span class="k">endmodule</span> 

<span class="cp">`default_nettype</span> <span class="kt">wire</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Е°╗Ф╣▀Х╞∙Х╞╔Х║▄ФЁ╒Х©⌡Д╫█Е┼═ФЁ∙Е≥╗Ф≈╤, И≥╓Д╨├Х©⌡Х║▄Е┘╗Г■╣Х╥╞Е┬²Е╖▀Е▄√Д╩╔Е▐┼Ф╣▀Х╞∙Ф┴─Ф°┴Г └Х╬⌠Е┘╔, Х╬⌠Е┤╨Д╩╔Е╓√, Х©≤Е╨■Ф╣▀Х╞∙Д╦┴Ф²║Х©·Ф▌╔Е┘╗Е┼═Е≥╗Г └Х©⌡Д╫█Е╞╪Г╨©. Ф╣▀Х╞∙Д╩ёГ═│Е╕┌Д╦▀:</p>

<div class="language-verilog highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
</pre></td><td class="rouge-code"><pre><span class="c1">// 4-bit adder testbench</span>


<span class="c1">// #1 = 1ns</span>
<span class="cp">`timescale</span> <span class="mi">1</span><span class="n">ns</span><span class="o">/</span><span class="mi">100</span><span class="n">ps</span> 

<span class="k">module</span> <span class="n">adder_4bit_tb</span><span class="p">();</span>

<span class="c1">// Internal connections</span>
<span class="kt">reg</span> <span class="p">[</span><span class="mi">3</span><span class="o">:</span><span class="mi">0</span><span class="p">]</span> <span class="n">a</span><span class="p">;</span>
<span class="kt">reg</span> <span class="p">[</span><span class="mi">3</span><span class="o">:</span><span class="mi">0</span><span class="p">]</span> <span class="n">b</span><span class="p">;</span>
<span class="kt">reg</span>       <span class="n">cin</span><span class="p">;</span>
<span class="kt">wire</span> <span class="p">[</span><span class="mi">3</span><span class="o">:</span><span class="mi">0</span><span class="p">]</span> <span class="n">s</span><span class="p">;</span>
<span class="kt">wire</span> <span class="n">cout</span><span class="p">;</span>

<span class="c1">// Instantiate adder_4bit as dut (device under test)</span>

<span class="n">adder_4bit</span> <span class="n">dut</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">cin</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">cout</span><span class="p">);</span>

<span class="c1">// Test vectors</span>
<span class="k">initial</span>
<span class="k">begin</span>
<span class="c1">// Using 14 test vectors the interconnect of the 4bit added can be verified</span>

<span class="c1">// Check all fulladders are connected to something, s=0 cout=0 not Xs</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mb">'b0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mb">'b0000</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>

<span class="c1">// Check connections for a[0], b[0], cin, S[0], S=0001 cout=0</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mb">'b0001</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mb">'b0000</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mb">'b0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mb">'b0001</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mb">'b0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mb">'b0000</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
<span class="c1">// Check connection of carry out of the first adder</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mb">'b0001</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mb">'b0001</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>

<span class="c1">// Check connections for a[1], b[1], c[1]</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mb">'b0010</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mb">'b0000</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mb">'b0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mb">'b0010</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="c1">// Check connection of carry out of the second adder</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mb">'b0010</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mb">'b0010</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>

<span class="c1">// Check connections for a[2], b[2], c[2]</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mb">'b0100</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mb">'b0000</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mb">'b0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mb">'b0100</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="c1">// Check connection of carry out of the third adder</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mb">'b0100</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mb">'b0100</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>

<span class="c1">// Check connections for a[3], b[3], c[3]</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mb">'b1000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mb">'b0000</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mb">'b0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mb">'b1000</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="c1">// Check connection of carry out of the fourth adder</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mb">'b1000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mb">'b1000</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>




<span class="c1">// Connectivity tests completed.</span>

<span class="c1">// ADD TESTS FOR FINDING MAXIMUM CARRY DELAY </span>
<span class="c1">// the critical path</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mb">'b0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mb">'b0000</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mb">'b1111</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mb">'b0000</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
<span class="c1">// it should be 9 ns</span>


<span class="p">#</span><span class="mi">100</span> <span class="p">$</span><span class="nb">finish</span><span class="p">;</span> <span class="c1">// exit the simulation</span>
<span class="k">end</span>
 
 
<span class="c1">// Save results as VCD file </span>
<span class="k">initial</span>
 <span class="k">begin</span>
  <span class="p">$</span><span class="nb">dumpfile</span><span class="p">(</span><span class="s">"adder_4bit_tb_results.vcd"</span><span class="p">);</span>  <span class="c1">// Save simulation waveforms in this file</span>
  <span class="p">$</span><span class="nb">dumpvars</span><span class="p">;</span> <span class="c1">// Capture all simulation waveforms</span>
 <span class="k">end</span>

<span class="k">endmodule</span> 
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Д╦▀И²╒Г╝─Е█∙Х╝╗Х╝╨ $4$ Д╫█Х║▄ФЁ╒Х©⌡Д╫█Е┼═ФЁ∙Е≥╗Г └Ф°─Е╓╖Е╩╤Х©÷И≈╝И╒≤: 
Ф═╧Ф█╝Е┴█Ф√┤Ф┴─Х©╟, Ф≤⌠Е╬≈Е╫⌠Д╦■Д╩┘Е╫⌠Е▐┌Д╦▌Х╝║Г╝≈Г └Ф∙╟Г └Ф╞▐Д╦─Д╫█И┐╫И°─Х╕│Х©⌡Д╫█Ф≈╤, Ф┴█Е▐╞Х┐╫Е▐▒Г■÷Ф°─Е╓╖Е╩╤Х©÷; Х─▄Г■╠Д╨▌Г╩└Ф┬░Х║▄ФЁ╒Х©⌡Д╫█Е┼═ФЁ∙Е≥╗Г └Е┘╗Е┼═Е≥╗Х╬⌠Е┤╨Е╩╤Х©÷Г └Г÷╜Х╥╞Г┴╧Ф─╖, Х╕│Ф┐ЁД╫©Ф°─Е╓╖Е╩╤Х©÷Е┤╨Г▌╟, Е©┘И║╩Г║╝Д©²Ф╞▐Д╦─Д╦╙Е┘╗Е┼═Е≥╗Ф╗║Г╩└Г └Д╦╓Д╦╙Х╬⌠Е┘╔Д©║Е▐╥ <code class="language-plaintext highlighter-rouge">a_i</code>, <code class="language-plaintext highlighter-rouge">b_i</code> Е╪┌Ф┬√Х©░Г╝≈Е░▌Е─╪Д╦╨ $1$, Д╦■ <code class="language-plaintext highlighter-rouge">cin_i == 1</code>. 
Е°╗Х╞╔Ф┐┘Е╫╒Д╦▀:</p>
<ol>
  <li>Г╩▐Х©┤1ns, Е┘╗И┐╗Г └Е⌡⌡Д╦╙Е┘╗Е┼═Е≥╗Е╝▄Ф┬░Д╨├Е╞╧ <code class="language-plaintext highlighter-rouge">a_i, b_i</code> Г └Е╪┌Ф┬√Х©░Г╝≈, Е╧╤Г╜┴Е╬┘ <code class="language-plaintext highlighter-rouge">c_in_i</code> Х╬⌠Е┘╔:</li>
  <li>Д╩▌Ф°─Д╫▌Д╫█Х©⌡Д╫█Е┬╟Ф°─И╚≤Д╫█, Ф╞▐Д╦─Д╫█Г └Х©⌡Д╫█Х╝║Г╝≈Е╩╤Х©÷Е²┤Д╦╨ <code class="language-plaintext highlighter-rouge">2ns</code>; Е┘╠Ф°┴ <code class="language-plaintext highlighter-rouge">2*4 = 8 ns</code>:</li>
  <li>Ф°─Г╩┬Е╝▄Ф┬░Х╬⌠Е┤╨, Ф─╩Х─≈Ф≈╤Д╦╨ <code class="language-plaintext highlighter-rouge">9ns</code>.</li>
</ol>

<p><br /></p>

<h2 id="16-Д╫█Х║▄ФЁ╒Х©⌡Д╫█Е┼═ФЁ∙Е≥╗">$16$ Д╫█Х║▄ФЁ╒Х©⌡Д╫█Е┼═ФЁ∙Е≥╗</h2>
<p>Е▓▄ $4$ Д╫█Х║▄ФЁ╒Х©⌡Д╫█Е┼═ФЁ∙Е≥╗Г╠╩Д╪╪, $16$ Д╫█Х║▄ФЁ╒Х©⌡Д╫█Е┼═ФЁ∙Е≥╗Ф≤╞Е⌡⌡Д╦╙ $4$ Д╫█Х║▄ФЁ╒Х©⌡Д╫█Е┼═ФЁ∙Е≥╗Г └Г╝─Е█∙Г╩└Е░┬, Е┘╥Д╫⌠Е╝·Г▌╟Ф√╧Е╪▐Д╦█Е├█Х╣≤Х©╟. Г⌡╦Е┘ЁЕ╝·Г▌╟Д╩ёГ═│Е▓▄Ф╣▀Х╞∙Д╩ёГ═│Е╕┌Д╦▀:</p>

<div class="language-verilog highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="c1">// 16-bit adder design using verilog primitive gates</span>

<span class="cp">`timescale</span> <span class="mi">1</span><span class="n">ns</span><span class="o">/</span><span class="mi">100</span><span class="n">ps</span>

<span class="cp">`default_nettype</span> <span class="n">none</span>

<span class="k">module</span> <span class="n">adder_16bit</span><span class="p">(</span><span class="kt">input</span>  <span class="kt">wire</span> <span class="p">[</span><span class="mi">15</span><span class="o">:</span><span class="mi">0</span><span class="p">]</span>  <span class="n">a</span><span class="p">,</span> 
                   <span class="kt">input</span>  <span class="kt">wire</span> <span class="p">[</span><span class="mi">15</span><span class="o">:</span><span class="mi">0</span><span class="p">]</span>  <span class="n">b</span><span class="p">,</span> 
                   <span class="kt">input</span>  <span class="kt">wire</span>         <span class="n">cin</span><span class="p">,</span> 
                   <span class="kt">output</span> <span class="kt">wire</span> <span class="p">[</span><span class="mi">15</span><span class="o">:</span><span class="mi">0</span><span class="p">]</span>  <span class="n">s</span><span class="p">,</span> 
                   <span class="kt">output</span> <span class="kt">wire</span>         <span class="n">cout</span><span class="p">);</span>

<span class="c1">//Internal carry connections</span>
<span class="kt">wire</span> <span class="n">c0</span><span class="p">;</span>    <span class="c1">// carry out bit 0 adder</span>
<span class="kt">wire</span> <span class="n">c1</span><span class="p">;</span>    <span class="c1">// carry out bit 1 adder</span>
<span class="kt">wire</span> <span class="n">c2</span><span class="p">;</span>    <span class="c1">// carry out bit 2 adder</span>
<span class="kt">wire</span> <span class="n">c3</span><span class="p">;</span>    <span class="c1">// carry out bit 3 adder</span>


<span class="c1">// Instantiate 4 x adder_4bit</span>
<span class="n">adder_4bit</span> <span class="n">adder0</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">3</span><span class="o">:</span><span class="mi">0</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="mi">3</span><span class="o">:</span><span class="mi">0</span><span class="p">],</span> <span class="n">cin</span><span class="p">,</span> <span class="n">s</span><span class="p">[</span><span class="mi">3</span><span class="o">:</span><span class="mi">0</span><span class="p">],</span> <span class="n">c0</span><span class="p">);</span>
<span class="n">adder_4bit</span> <span class="n">adder1</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">7</span><span class="o">:</span><span class="mi">4</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="mi">7</span><span class="o">:</span><span class="mi">4</span><span class="p">],</span> <span class="n">c0</span><span class="p">,</span> <span class="n">s</span><span class="p">[</span><span class="mi">7</span><span class="o">:</span><span class="mi">4</span><span class="p">],</span> <span class="n">c1</span><span class="p">);</span>
<span class="n">adder_4bit</span> <span class="n">adder2</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">11</span><span class="o">:</span><span class="mi">8</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="mi">11</span><span class="o">:</span><span class="mi">8</span><span class="p">],</span> <span class="n">c1</span><span class="p">,</span> <span class="n">s</span><span class="p">[</span><span class="mi">11</span><span class="o">:</span><span class="mi">8</span><span class="p">],</span> <span class="n">c2</span><span class="p">);</span>
<span class="n">adder_4bit</span> <span class="n">adder3</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">15</span><span class="o">:</span><span class="mi">12</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="mi">15</span><span class="o">:</span><span class="mi">12</span><span class="p">],</span> <span class="n">c2</span><span class="p">,</span> <span class="n">s</span><span class="p">[</span><span class="mi">15</span><span class="o">:</span><span class="mi">12</span><span class="p">],</span> <span class="n">cout</span><span class="p">);</span>



<span class="k">endmodule</span> 

<span class="cp">`default_nettype</span> <span class="kt">wire</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Ф╣▀Х╞∙:</p>

<div class="language-verilog highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
</pre></td><td class="rouge-code"><pre><span class="c1">// 16-bit adder testbench</span>

<span class="c1">// #1 = 1ns</span>
<span class="cp">`timescale</span> <span class="mi">1</span><span class="n">ns</span><span class="o">/</span><span class="mi">100</span><span class="n">ps</span> 

<span class="k">module</span> <span class="n">adder_16bit_tb</span><span class="p">();</span>

<span class="c1">// Internal connections</span>
<span class="kt">reg</span> <span class="p">[</span><span class="mi">15</span><span class="o">:</span><span class="mi">0</span><span class="p">]</span>  <span class="n">a</span><span class="p">;</span>
<span class="kt">reg</span> <span class="p">[</span><span class="mi">15</span><span class="o">:</span><span class="mi">0</span><span class="p">]</span>  <span class="n">b</span><span class="p">;</span>
<span class="kt">reg</span>         <span class="n">cin</span><span class="p">;</span>
<span class="kt">wire</span> <span class="p">[</span><span class="mi">15</span><span class="o">:</span><span class="mi">0</span><span class="p">]</span> <span class="n">s</span><span class="p">;</span>
<span class="kt">wire</span>        <span class="n">cout</span><span class="p">;</span>

<span class="c1">// Instantiate adder_16bit as dut (device under test)</span>

<span class="n">adder_16bit</span> <span class="n">dut</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">cin</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">cout</span><span class="p">);</span>

<span class="c1">// Test vectors</span>
<span class="k">initial</span>
<span class="k">begin</span>
<span class="c1">// 38 test vectors required for connectivity tests</span>
<span class="c1">// Check all adders are connected to something, S=0 cout=0 not Xs</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="c1">//Check connections for A[0], B[0], Cin, S[0], S=0001 cout=0</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0001</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0001</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
<span class="c1">//Check connections for  A[1], B[1], S[1]</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0002</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0002</span><span class="p">;</span>
<span class="c1">//Check connections for  A[2], B[2], S[2]</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0004</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0004</span><span class="p">;</span>
<span class="c1">//Check connections for  A[3], B[3], S[3]</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0008</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0008</span><span class="p">;</span>
<span class="c1">//Check connection of carry out of the first 4bit adder in to 2nd 4-bit adder</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0008</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0008</span><span class="p">;</span>


<span class="c1">// Check the second 4-bit adder</span>
<span class="c1">//Check connections for A[0], B[0], S[0]</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0010</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0010</span><span class="p">;</span>
<span class="c1">//Check connections for  A[1], B[1], S[1]</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0020</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0020</span><span class="p">;</span>
<span class="c1">//Check connections for  A[2], B[2], S[2]</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0040</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0040</span><span class="p">;</span>
<span class="c1">//Check connections for  A[3], B[3], S[3]</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0080</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0080</span><span class="p">;</span>
<span class="c1">//Check connection of carry out of the 2nd 4bit adder in to 3rd 4-bit adder</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0080</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0080</span><span class="p">;</span>

<span class="c1">// Check the third 4-bit adder</span>
<span class="c1">//Check connections for A[0], B[0], S[0]</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0100</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0100</span><span class="p">;</span>
<span class="c1">//Check connections for  A[1], B[1], S[1]</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0200</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0200</span><span class="p">;</span>
<span class="c1">//Check connections for  A[2], B[2], S[2]</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0400</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0400</span><span class="p">;</span>
<span class="c1">//Check connections for  A[3], B[3], S[3]</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0800</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0800</span><span class="p">;</span>
<span class="c1">//Check connection of carry out of the 3rd 4bit adder in to 4th 4-bit adder</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0800</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0800</span><span class="p">;</span>

<span class="c1">// Check the fourth 4-bit adder</span>
<span class="c1">//Check connections for A[0], B[0], S[0]</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h1000</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h1000</span><span class="p">;</span>
<span class="c1">//Check connections for  A[1], B[1], S[1]</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h2000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h2000</span><span class="p">;</span>
<span class="c1">//Check connections for  A[2], B[2], S[2]</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h4000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h4000</span><span class="p">;</span>
<span class="c1">//Check connections for  A[3], B[3], S[3]</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h8000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h8000</span><span class="p">;</span>
<span class="c1">//Check connection of carry out of the 4th 4bit adder in to cout</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h8000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h8000</span><span class="p">;</span>


<span class="c1">// Connectivity tests completed.</span>

<span class="c1">// ADD TESTS FOR FINDING MAXIMUM CARRY DELAY</span>
<span class="c1">// the critical path</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="p">#</span><span class="mi">100</span> <span class="n">a</span><span class="o">=</span><span class="mh">16'hFFFF</span><span class="p">;</span> <span class="n">b</span><span class="o">=</span><span class="mh">16'h0000</span><span class="p">;</span> <span class="n">cin</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
<span class="c1">// it should be 33 ns</span>

<span class="p">#</span><span class="mi">100</span> <span class="p">$</span><span class="nb">finish</span><span class="p">;</span>
<span class="k">end</span>
 
 
<span class="c1">// Save results as VCD file </span>
<span class="k">initial</span>
 <span class="k">begin</span>
  <span class="p">$</span><span class="nb">dumpfile</span><span class="p">(</span><span class="s">"adder_16bit_tb_results.vcd"</span><span class="p">);</span>  <span class="c1">// Save simulation waveforms in this file</span>
  <span class="p">$</span><span class="nb">dumpvars</span><span class="p">;</span> <span class="c1">// Capture all simulation waveforms</span>
 <span class="k">end</span>

<span class="k">endmodule</span> 
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Д╬²Г┘╖Г╠╩Д╪╪Г └Е┬├Ф·░Ф╣│Г╗▀, Д╦█И ╬Е╬≈Е┤╨Е┘╤Ф°─Е╓╖И≈╗Г╨╖Е╩╤Х©÷Д╦╨ <code class="language-plaintext highlighter-rouge">1 + 4*8 = 32ns</code>.</p>

<p><br /></p>

<h2 id="Х╤┘Е┴█Х©⌡Д╫█Е┼═ФЁ∙Е≥╗">Х╤┘Е┴█Х©⌡Д╫█Е┼═ФЁ∙Е≥╗</h2>
<p>Х║▄ФЁ╒Х©⌡Д╫█Е┼═ФЁ∙Е≥╗Г╩⌠Ф·└Г╝─Е█∙, Е╝·Г▌╟Д╬©Е┬╘. Д╫├Ф≤╬Х─▄Ф≤⌠Х╖│, Е┘╤Ф°─Е╓╖И≈╗Г╨╖Е╩╤Х©÷Е╟├И ▐Г²─Х╒╚Х╝║Г╝≈Ф∙╟Д╫█Ф∙╟Г └Е╒·И∙©Х─▄Е╒·И∙©. Д╦╨Д╨├Х╖└И│©Х©≥Д╦─И≈╝И╒≤, Е▐┬Х╝╬Х╝║Д╨├Х╤┘Е┴█Х©⌡Д╫█Е┼═ФЁ∙Е≥╗:</p>

<p>Х╤┘Е┴█Х©⌡Д╫█Е┼═ФЁ∙Е≥╗ (<code class="language-plaintext highlighter-rouge">Carry-Look Ahead Adder</code>) Ф≤╞Д╦─Г╖█И╚≤И─÷Е┼═ФЁ∙Е≥╗, Ф╞▐Д╦─Д╦╙Х©░Г╝≈Д╫█Г └Е─╪И┐╫Г■╠Д╦─Г╩└Г┴╧Е╝ Г■╣Х╥╞Е░▄Ф≈╤Г■÷Ф┬░, Х─▄Ф≈═И°─Г╜┴Е╬┘Д╦┼Д╦─Д╫█Г └Х©░Г╝≈Г╩⌠Ф·°Е╝▄Ф┬░, Ф╞▐Д╦╙Е┘╗Е┼═Е≥╗Г └Х©⌡Д╫█Х╬⌠Е┘╔Е╧╤Д╦█Ф²╔Х┤╙Е┴█Д╦─Г╨╖Г └Е┘╗Е┼═Е≥╗Х©░Г╝≈Г╩⌠Ф·°, Х─▄Ф≤╞Г■╠Х╤┘Е┴█Х©⌡Д╫█Г └И─╩Х╬▒Ф┴─Г║╝Е╝ . Е┘╤И─╩Х╬▒Е▌÷Г░├Е╕┌Д╦▀:</p>

<p>Д╦█Е╓╠Д╦─Х┬╛Ф─╖, Х─┐Х≥▒Д╦─Д╦╙Е█∙Д╫█Г └Е░╚Х©⌡Д╫█Д╨▄Х©⌡Е┬╤Е┼═ФЁ∙: $A_i + B_i , C_i$. Г■╠Г°÷Е─╪Х║╗Е▐╞Е╬≈:</p>

\[C_{i+1} = B_i\cdot C_i + A_i\cdot C_i + B_i\cdot A_i = A_i \cdot B_i + (A_i + B_i)\cdot C_i\]

<p>Е╝ Д╧┴:</p>

\[G_i = A_i\cdot B_i, ~~~ P_i = A_i + B_i\]

<p>Ф∙┘И─▓Ф▌╗Е╪▐Е▄√Д╦╨:</p>

\[C_{i+1} = G_i + P_i \cdot C_i\]

<p>Е⌡═Ф╜╓, И─▓Ф▌╗Е┘ЁГЁ╩Е▐╞Ф∙╢Г░├Е╕┌Д╦▀:</p>

\[C_i = \begin{cases} ~G_i ~~~~~~~~~~~~~~~~~~~~~~ i = 0 \\\ G_i + P_i \cdot C_i ~~~~~~ i \geqslant 1 \end{cases} ~~~~~~while~~~~~~  \begin{cases} ~G_i = A_i \cdot B_i \\\ P_i = A_i + B_i \end{cases}\]

<p>Д╩╔Д╦─Д╦╙ $4$ Д╫█Х╤┘Е┴█Х©⌡Д╫█Е┼═ФЁ∙Е≥╗Д╦╨Д╬▀, Е┘╤Х╬⌠Е┤╨Е▐╞Х║╗Г╓╨Д╦╨:</p>

\[C_4 = G_3 + P_3 \cdot G_2 + P_3 \cdot P_2 \cdot G_1 + P_3 \cdot P_2 \cdot P_1 \cdot G_0 + 
P_3 \cdot P_2 \cdot P_1 \cdot P_0 \cdot C_0\]

<p><img src="https://cdn.jsdelivr.net/gh/KirisameMarisaa/KirisameMarisaa.github.io/img/blogpost_images/20201105193909.png" alt="20201105193909" /></p>

<p>Е▐╞Х╖│, Х╤┘Е┴█Х©⌡Д╫█Е┼═ФЁ∙Е≥╗Х≥╫Г└╤Х╝║Г╝≈ $C_{i+1}$ Г └Е╩╤Х©÷Ф│▓Д╦╨Д╦┴Г╨╖И≈╗Е╩╤Х©÷, Д╦▌Е┼═ФЁ∙Е≥╗Г └Д╫█Ф∙╟Ф≈═Е┘Ё, Д╫├Д╩ёД╩╥Ф≤╞И ▐Г²─Е┼═ФЁ∙Е≥╗Д╫█Ф∙╟Г └Е╒·Е┼═, Е┘╤Г■╣Х╥╞Е╓█Ф²┌Е╨╕Д╧÷И ▐Д╧▀Е╒·Е┼═.</p>

<p>Е⌡═Ф╜╓, Е°╗Е╝·И≥┘Г■╣Х╥╞Х╝╬Х╝║Д╦╜, Е╦╦Е╦╦И┤┤Е▐√Ф┼≤Д╦╜Г └Х╖ёЕ├ЁФ√╧Ф║┬: И┴╢Д╨▌Х║▄ФЁ╒Х©⌡Д╫█Е┼═ФЁ∙Е≥╗Д╩╔Е╓█Ф²┌Е╨╕Ф█╒Ф∙┬Г▌┤, Х╤┘Е┴█Х©⌡Д╫█Е┼═ФЁ∙Е≥╗Д╩╔Ф∙┬Г▌┤Ф█╒Е╓█Ф²┌Е╨╕, Ф┬▒Д╩╛И┤┤Г■╗Е╓ Д╦╙Е╟▐Х╖└Ф╗║Г └Х╤┘Е┴█Х©⌡Д╫█Е┼═ФЁ∙Е≥╗Д╦╡Х│■Ф▀╪Ф▌╔, Е╫╒Ф┬░Д╦─Д╦╙Д╫█Ф∙╟Х╬┐Е╓ Г └Е╓╖Е┼═ФЁ∙Е≥╗, Е╕┌Г■╗ $4$ Д╦╙ $8$-bit Г └Х╤┘Е┴█Х©⌡Д╫█Е┼═ФЁ∙Е≥╗Х©·Ф▌╔Ф┬░Д╦─Д╦╙ $32$-bit Г └Е┼═ФЁ∙Е≥╗.</p>
:ET