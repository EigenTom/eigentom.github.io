I"'L<h1 id="基础搜索算法">基础搜索算法</h1>

<p>在本章中, 我们首先会对 <strong>推断</strong> 这一逻辑过程进行建模, 并将其含义与 <strong>搜索</strong> 整合起来, 解释 <strong>将推断的逻辑行为建模和实现为搜索算法</strong> 的原理与合理性.</p>

<p>其次, 我们将介绍包括深度优先搜索 (<code class="language-plaintext highlighter-rouge">DFS</code>) 在内的数种基础搜索算法.</p>

<h2 id="1-推断和搜索">1. 推断和搜索</h2>

<p>下面介绍两种对问题的建模思路: 将问题建模为 <strong>状态转换问题</strong> 和 将问题建模为 <strong>逻辑推断问题</strong>.</p>

<h3 id="11-将问题建模为状态转换问题">1.1 将问题建模为状态转换问题</h3>

<p>考虑如下的一个问题:</p>

<p><img src="https://cdn.jsdelivr.net/gh/KirisameR/KirisameR.github.io/img/blogpost_images/20220120152229.png" alt="20220120152229" /></p>

<p>给定如上图所示的初始条件, 我们需要生成一系列由 <code class="language-plaintext highlighter-rouge">Dalek</code> 所执行的操作组成的策略, 从而使得书架被运到客厅 (<code class="language-plaintext highlighter-rouge">sitting room</code>), 且 <code class="language-plaintext highlighter-rouge">Dalek</code> 最终位于大厅 (<code class="language-plaintext highlighter-rouge">hall</code>) 内.</p>

<p>我们可以如下分别表达这个问题所描述的两种事实:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre>// Fluents
[in(dalek, hall), 
 in(bookcase, hall), 
 in(table, study)]

// Permanents
[adjacent(bedroom, hall)
 adjacent(hall, sitting-room), 
 adjacent(sitting-room, study)]
</pre></td></tr></tbody></table></code></pre></div></div>

<p>并且我们可以将问题的目标描述如下:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>// Goals
[in(dalek, hall), in(table, sitting-room)]
</pre></td></tr></tbody></table></code></pre></div></div>

<p>注意在这里我们使用数组存储可变事实, 既定事实和目标.</p>

<p>我们首先对 <strong>推断</strong> 这一逻辑操作进行行为上的拆解. 任何推断都必须存在一个被推断主体, 也就是问题本身, 因此要对推断建模, 我们首先需要对问题本身进行建模.</p>

<p>进一步地, 问题的本质是: 我们需要生成一个符合某些限制条件的策略, 使得问题中所提出的要求可以通过执行策略来满足. 显然地, 任何一个问题又可细分为四个部分:</p>
<ol>
  <li>当前已知, 但会随着我们采取行为而被改变的可变事实 (<code class="language-plaintext highlighter-rouge">Fluents</code>).</li>
  <li>当前已知, 且永不会被改变的既定事实 (<code class="language-plaintext highlighter-rouge">Permanents</code>).</li>
  <li>问题所提出的目标 (<code class="language-plaintext highlighter-rouge">Goal</code>).</li>
  <li>策略的组成部分: 我们可以执行的所有行为 (<code class="language-plaintext highlighter-rouge">Actions</code>).</li>
</ol>

<p>我们下面限定 <code class="language-plaintext highlighter-rouge">Dalek</code> 的行为:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>// Actions
carry(bookcase, study, sitting-room), 
go(sitting-room, hall)
</pre></td></tr></tbody></table></code></pre></div></div>

<p>显然更进一步地, 任何行为又包含四个部分:</p>
<ol>
  <li>我们具体要执行的操作.</li>
  <li>该行为能够被执行所需要满足的前提条件.</li>
  <li>在行为执行后, 所出现的新事实.</li>
  <li>在行为执行后, 所消失的旧事实.</li>
</ol>

<p>我们可以进一步地细化两个行为:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre>// carry
action-type(
    carry(Object, Room1, Room2),
    pre-conds([in(Object, Room1), 
               in(dalek, Room1), 
               adjacent(Room1, Room2)]),
    add-list([in(dalek, Room2), in(Object, Room2)]), 
    del-list([in(dalek, Room1), in(Object, Room1)]).
)

// go
action-type(
    go(Room1, Room2), 
    pre-conds([in(dalek, Room1), 
               adjacent(Room1, Room2)]),
    add-list([in(dalek, Room2)]), 
    del-list([in(dalek, Room1)]).
)
</pre></td></tr></tbody></table></code></pre></div></div>

<p>而通过将细化的行为描述中所有的变量赋值, 我们就可以将其 <strong>实例化</strong>.</p>

<p>我们可以将所有可能采取的行策略 <strong>表示为一个多叉树</strong> , 其中: 节点由一个表示当前状态的可变事实列表代表, 而每一条边都是一个 <strong>被实例化的</strong> 行为.</p>

<p>每个节点对应的子树数量为在该节点上可采取的行为的种数, 而每层节点的数量为上一整层节点在进行所有可能的行为后所能被变换到的新状态的数量总和.</p>

<p><img src="https://cdn.jsdelivr.net/gh/KirisameR/KirisameR.github.io/img/blogpost_images/20220120151325.png" alt="20220120151325" /></p>

<p>在完成对问题的建模后, 我们还需要对应的逻辑方法用于解决问题并给出可行解. 由于我们将问题的状态转换建模为树, 我们相应地就需要一套用来在树中搜索可行路径 (在解空间内搜索可行解) 的方法.</p>

<p>称程序用于在所有可能的推断中选择用于解决问题达成目标的特定推断的算法为 <strong>启发算法</strong> (<code class="language-plaintext highlighter-rouge">Heuristics</code>).</p>

<h3 id="12-将问题建模为逻辑推断问题">1.2 将问题建模为逻辑推断问题</h3>

<p>我们除了将求解问题的过程视为状态转换过程外, 还可以将其抽象为逻辑推断问题. 在这一建模思想下, 解决问题的核心是下图所示的逻辑推断规则:</p>

<p><img src="https://cdn.jsdelivr.net/gh/KirisameR/KirisameR.github.io/img/blogpost_images/20220120153521.png" alt="20220120153521" /></p>

<p>显然, 在开始解决问题时我们有一系列的 <strong>已知事实</strong>. 通过应用不同的推断规则, 已知事实就会发生不同的变化: 我们可能从已知的一些事实中推断出新的.</p>

<p>由此, 从初始状态下的已知事实出发, 执行所有可能被应用的逻辑推断规则的过程就可同样地被建模成 <strong>知识状态树</strong>:</p>

<p><img src="https://cdn.jsdelivr.net/gh/KirisameR/KirisameR.github.io/img/blogpost_images/20220120153906.png" alt="20220120153906" /></p>

<p>通过逐步地确定在不同的状态下基于当前的知识应该应用哪条三段论推理规则最终使知识状态 (<code class="language-plaintext highlighter-rouge">Knowledge State</code>) 和目标状态保持一致, 我们也可以求得问题的解. 在这一建模思想下, 求解问题的过程也就是在知识状态树上搜索的过程.</p>

<p><br /></p>

<h2 id="2-搜索算法">2. 搜索算法</h2>

<p>从上一节中可以看出, 从对现实问题的两种建模方式出发, 解决问题的本质最终都殊途同归地表示为了 <strong>在某种状态树上的搜索过程</strong>. 因此, 在本节中, 我们介绍四种基础的搜索算法.</p>

<h3 id="21-深度优先搜索-dfs">2.1 深度优先搜索 <code class="language-plaintext highlighter-rouge">DFS</code></h3>

<p>深度优先搜索的原理是, 搜索到某个节点后, 若它不为所需要的节点, 则下一步总是以搜索它的子节点而非同级节点为最高优先. 该原理决定了其行为是: 一条条地纵向遍历, 从上到下地 <strong>完整</strong> 搜索每一条可行路径, 直到得到一个可行路径 (可行解) 为止. 其伪代码如下:</p>

<pre><code class="language-Python">dfs(Queue):
    if Queue is non-empty:
        FirstNode := Queue.pop()
        if FirstNode is goal_node:
            return FirstNode
        add_daughters_of_FirstNode_to_the_front_of_the_queue
        return dfs(Queue)
    return failure
</code></pre>

<p>我们也可以这样递归地实现 <code class="language-plaintext highlighter-rouge">DFS</code>:</p>

<pre><code class="language-Python">dfs(Node):
    if Node is goal_node:
        return Node
    for each Daughter in daughters_of_Node:
        if dfs(Daughter) != failure:
            return dfs(Daughter)
    return failure
</code></pre>

<p><br /></p>

<h3 id="22-广度优先搜索-bfs">2.2 广度优先搜索 <code class="language-plaintext highlighter-rouge">BFS</code></h3>

<p>广度优先的原理是, 搜索到某个节点时, 若它不为所需要的节点, 则下一步总是以搜索与其同级的节点而非其子节点为最高优先. 故其行为是: 一级级地横向遍历, 从左到右地 <strong>完整</strong> 搜索每一级上的全部节点, 直到得到一个可行路径 (可行解) 为止. 其伪代码如下:</p>

<pre><code class="language-Python">bfs(Queue):
    if Queue is non-empty:
        FirstNode := Queue.pop()
        if FirstNode is goal_node:
            return FirstNode
        add_daughters_of_FirstNode_to_the_end_of_the_queue
        return bfs(Queue)
    return failure
</code></pre>

<p><br /></p>

<p>深度优先和广度优先搜索仍然属于结构最为简易的搜索方法, 它们给出的解可能并非解空间中的最优解.</p>

<p>为了分别解与解之间的优劣, 我们引入 <strong>代价</strong> 的概念, 它刻画了一个人为定义的, 反映实际情况中为了实现某个解所需要付出的成本的大小. 为了找到 <strong>成本最低</strong> 的解, 我们进行如下假设:</p>

<ol>
  <li>
    <p>假定我们可能采取的任何行为都有一个 (!非负的) 成本 (<code class="language-plaintext highlighter-rouge">Cost</code>). 因此, 每个节点 $\nu$ 对应地有一个数据 $C(\nu)$ 表示从根节点执行一系列行为后到达该点所需要付出的成本 <code class="language-plaintext highlighter-rouge">Cost so-far</code>.</p>
  </li>
  <li>
    <p>假设对任何问题而言, 为了实现目标所需要付出的代价都是有限的, 因此存在一个非负的 <strong>成本下界</strong> (<code class="language-plaintext highlighter-rouge">lower bound</code>). 结合假设 <code class="language-plaintext highlighter-rouge">1</code>, 我们可知每个节点 $\nu$ 都有一个对应的 <strong>从该状态转移到问题可满足状态所需要付出的代价的最小估计</strong> $U(\nu)$.</p>
  </li>
</ol>

<p>需要注意: 深度优先和广度优先搜索伪代码除了可以表示为上文提到的 <strong>栈实现</strong> 外, 还可表示为 (实际上最常用到的) <strong>递归实现</strong>, 递归实现在实际程序执行时生成的内部栈和栈实现是完全一致的, 二者实际上等价.</p>

<p>我们下面介绍两种可用于求解成本最低解的算法: 分支定界算法 (<code class="language-plaintext highlighter-rouge">branch-and-bound</code>) 和 <code class="language-plaintext highlighter-rouge">A*</code>:</p>

<p><br /></p>

<h3 id="23-分支定界算法-branch-and-bound">2.3 分支定界算法 <code class="language-plaintext highlighter-rouge">Branch and Bound</code></h3>

<p>我们定义总代价 $K(\nu)$:</p>

\[K(\nu) := C(\nu) + U(\nu)\]

<p>根据上述分析, 此式显然成立. 在算法执行之初, $K(\nu)$ 是未知的. 当算法找到第一个解时, 其代价 $C(\nu)$ 被自然地赋值为 $K(\nu)$, 因为 $U(\nu)=0$, 此式我们记录下该解并对 $K(\nu)$ 赋值. 随着算法继续执行搜索, 我们可能找到更多的解. 若某个解的 $K(\mu) \leqslant K(\nu)$, 我们更新最优解和相应的 $K(\nu)$. 在确定筛选完了所有解后, 此时的 $\nu$ 就是所需的最优解.</p>

<p>在实际的分支定界算法中, 为了提高算法效率我们还会对搜索树进行剪枝.</p>

<p>分支定界算法始终围绕状态树进行. 将原问题视为根节点并从这里出发, 搜索行为类似于深度优先搜索. 分支的含义就是将大的问题分割成小的问题. 大问题可以看成是搜索树的父节点, 故从大问题分割出来的小问题就是子节点, 分支就是不断增加子节点的过程.</p>

<p>定界指在分支的过程中检查子问题的成本上下界. 若子问题不能产生更优解, 则对这一支执行剪枝. 直到所有子问题都不能产生一个更优的解时, 算法结束.</p>

<p>分支定界算法的伪代码如下:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="c1"># BestCost变量维护当前已知最优解的最低代价
</span>
<span class="n">BestCost</span> <span class="o">=</span> <span class="n">INFINITY</span>     <span class="c1"># 初始化已知最低代价
</span><span class="n">CurrentBest</span> <span class="o">=</span> <span class="n">none</span>      <span class="c1"># 初始化当前最优解
</span>
<span class="n">bnb</span><span class="p">(</span><span class="n">Queue</span><span class="p">,</span> <span class="n">BestCost</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">Queue</span> <span class="ow">is</span> <span class="n">non</span><span class="o">-</span><span class="n">empty</span><span class="p">:</span>
        <span class="c1"># 逐个检查序列中的所有节点
</span>        <span class="n">FirstNode</span> <span class="p">:</span><span class="o">=</span> <span class="n">Queue</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>    
        
        <span class="c1"># 只考虑成本上界低于当前最低代价的节点
</span>        <span class="k">if</span> <span class="n">K</span><span class="p">(</span><span class="n">FirstNode</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">BestCost</span><span class="p">:</span>

            <span class="c1"># 若某个节点是目标节点且达到该节点所需代价更少
</span>            <span class="c1"># 则更新当前最优解和已知最小代价
</span>            <span class="k">if</span> <span class="n">K</span><span class="p">(</span><span class="n">FirstNode</span><span class="p">)</span> <span class="n">is_a_goal_node</span><span class="p">:</span>
                <span class="n">CurrentBest</span> <span class="p">:</span><span class="o">=</span> <span class="n">FirstNode</span>
                <span class="n">BestCost</span> <span class="p">:</span><span class="o">=</span> <span class="n">K</span><span class="p">(</span><span class="n">Currentbest</span><span class="p">)</span>
            
            <span class="c1"># 反之检索该节点下的所有子节点
</span>            <span class="k">else</span>
                <span class="n">add_daughters_of_FirstNode_to_the_front_of_Queue</span>

        <span class="c1"># 递归检索序列中的每个节点        
</span>        <span class="n">bnb</span><span class="p">(</span><span class="n">Queue</span><span class="p">,</span> <span class="n">BestCost</span><span class="p">)</span>
    
    <span class="c1"># 检索完序列中所有节点后若最低代价被更新了则返回当前已知最优解
</span>    <span class="k">else</span> <span class="k">if</span> <span class="n">BestCost</span> <span class="o">!=</span> <span class="n">INFINITY</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">CurrentBest</span>

    <span class="c1"># 否则说明无解
</span>    <span class="k">return</span> <span class="n">failure</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h3 id="24-a-算法">2.4 A* 算法</h3>

<p>在上学期的 <code class="language-plaintext highlighter-rouge">Java Coursework</code> 中, 我们已经部分地了解了 <code class="language-plaintext highlighter-rouge">A*</code> 算法. 在此处我们将介绍的 <code class="language-plaintext highlighter-rouge">A*</code> 算法的具体特征与之有所不同. 我们首先定义 A* 算法:</p>

<p>广义上的 <code class="language-plaintext highlighter-rouge">A*</code> 算法具备有两个部分组成的损失计算函数:</p>
<ol>
  <li>从初始节点到当前节点所需要付出的代价.</li>
  <li>从当前节点到目标节点所需要付出的代价.</li>
</ol>

<p>我们的目标为计算出总成本最小的解. 要实现这一目标, 我们可以通过优先选择在每一步中成本 $C(\nu)$ 最小的节点 $\nu$, 也就是 <strong>优先选择局部最优</strong>.</p>

<p><code class="language-plaintext highlighter-rouge">A*</code> 算法的伪代码如下:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="c1"># 定义: K(v) = C(v) + U(v)
# v为某个节点, C(v) 为到这个节点所已经花的代价
# U(v) 为从这个节点到目标节点还要花费的预估代价
</span>
<span class="n">ast</span><span class="p">(</span><span class="n">Queue</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">Queue</span> <span class="ow">is</span> <span class="n">non</span><span class="o">-</span><span class="n">empty</span><span class="p">:</span>
        <span class="n">FirstNode</span> <span class="p">:</span><span class="o">=</span> <span class="n">Queue</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">FirstNode</span> <span class="o">==</span> <span class="n">GoalNode</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">FirstNode</span>
        <span class="n">compute</span> <span class="n">daughters</span> <span class="n">of</span> <span class="n">FirstNode</span><span class="p">,</span> <span class="n">then</span> <span class="n">add</span> <span class="n">to</span> <span class="n">Queue</span>
        
        <span class="c1"># 该步非常关键, 决定了A*算法只会
</span>        <span class="c1"># 优先考虑预估成本最小的节点
</span>        <span class="n">order</span> <span class="n">Queue</span> <span class="n">by</span> <span class="n">K</span>    
        
        <span class="k">return</span> <span class="n">ast</span><span class="p">(</span><span class="n">Queue</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">failure</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET