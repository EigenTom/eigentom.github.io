I"<h1 id="4-时空复杂度">4. 时空复杂度</h1>

<p>在本章中, 我们将简述复杂度渐进分析的基本概念和方法.</p>

<p>我们首先需要明确几点:</p>
<ol>
  <li>本章节所分析的对象是 <strong>程序的复杂度</strong>, 也就是对程序运行时所占用的资源大小的估计. 在本章中, 我们主要关心的对象是程序的 <strong>运行时间</strong>.</li>
  <li>在本章中, 我们缩关注的程序运行时间为 <strong>最坏状况下程序运行所需的最长时间</strong>.</li>
  <li>本章仅介绍复杂度分析的基本概念, 不会涉及对复杂程序和算法的时间复杂度分析.</li>
  <li>在本章中, 我们将不同操作和运算所消耗的时间进行归一化, 也就是假定赋值运算, 数值计算, 内存访问等操作所需要的时间基本一致, 从而简化复杂度分析的难度.</li>
</ol>

<h2 id="时间复杂度及渐进分析">时间复杂度及渐进分析</h2>

<p>我们考虑下面的这个简单的例子:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="n">r</span> <span class="p">:</span><span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="n">d</span> <span class="p">:</span><span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">while</span> <span class="n">y</span><span class="o">&lt;=</span> <span class="n">r</span> <span class="n">do</span> 
    <span class="n">d</span> <span class="p">:</span><span class="o">=</span> <span class="n">d</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">r</span> <span class="p">:</span><span class="o">=</span> <span class="n">r</span><span class="o">-</span><span class="n">y</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>下面对这个程序的时间复杂度进行分析:</p>

<p>我们首先关注的是程序在运行过程中执行了多少次基础操作, 如赋值和数值运算. 可以看出, 程序的第一行中执行了两个赋值语句, 而第二行则执行了一次循环条件判断.</p>

<p>在循环体中, 每次循环程序均会执行两次赋值和两次数值运算. 由此看出, 执行一次循环所需要执行的基础操作为: 一次条件判断 + 两次赋值 + 两次数值运算 = $5$.</p>

<p>而不难看出, 该程序的功能是计算 $\text{int}(r / y)$, 因此可以得出循环总共会执行 $\lfloor \frac{r}{y} \rfloor$ 次.</p>

<p>因此, 可以得出, 该程序执行一次的时间消耗为</p>

\[3 + 5 \cdot \lfloor \frac{r}{y} \rfloor.\]

<p>不难看出, 该程序的时间消耗介于 $O(1)$ 和 $O(n)$ 之间.</p>

<p>[这里应该补充 “eventually dominate” 的定义和一些例子, 但是鉴于该内容已经在COMP11120中详细介绍过, 因此不再赘述.]</p>

<p>[这里应该附上 $O(k), O(\log n), O(n), O(n\log n), O(n^2), O(k^n)$ 的对比图, 但由于同样的原因不再赘述]</p>

<p><br /></p>

<h2 id="on-符号的定义及基本性质">$O(n)$ 符号的定义及基本性质</h2>

<p><strong>定义</strong> ($O(n)$)</p>
<blockquote>
  <p>若对 $f \in O(g),~~ g: \mathbb{N} \rightarrow \mathbb{R}_{\geq 0}$, 则存在 $k \in \mathbb{N}, C \geq 0$ 使得对所有 $n &gt; k$: 
\(f(n) \leq C \cdot g(n).\)</p>
</blockquote>

<p><strong>引理 1</strong></p>
<blockquote>
\[f \in O(f).\]
</blockquote>

<p>[证明]</p>

<p>取 $k = 0, ~~C= 1$. 则对 $\forall~ n \in \mathbb{N}$:</p>

\[f(n) = Cf(n) \leq Cf(n).\]

<p><strong>引理 2</strong></p>
<blockquote>
  <p>\(O(1) \subsetneq O(n)\)
即: $O(1)$ 是 $O(n)$ 的真子集.</p>
</blockquote>

<p>[证明]</p>

<p>不妨设 $f \in O(1)$. 则存在 $k$, 使得对于 $\forall~ n &gt; k$: 
\(f(n) \leq C\cdot 1 = C\)</p>

<p>取 $k’ = \max(1, k), ~~ C’ = C$. 则对 $\forall n &gt; k’$, 有:</p>

\[f(n) \leq C \leq Cn.\]

<p>故有</p>

\[f \in O(n).\]

<p>取 $g(n) = n$, 其显然在 $O(n)$ 而不在 $O(1)$ 中. 故真包含关系证毕.</p>

<p><strong>引理 3</strong></p>
<blockquote>
  <p>对多项式 
\(g(n) = a_kn^k + a_{k-1}n^{k-1} + \cdots + a_1n + a_0\)
若 $a_k &gt; 0$. 则有 $O(g) = O(n^k).$</p>
</blockquote>

<p>[证明]</p>

<p>不妨设 $f \in O(g)$. 由定义知: $\exists ~K, C$ 使得 $n&gt; K:$</p>

\[f(n) &lt; C \cdot g(n)\]

<p>由 $n\geq 1, i&gt;j: n^i &gt; n^j.$ 故取</p>

\[K' = \max(1, K), C' = \sum_{i=0}^{k}C\vert a_i\vert\]

<p>则有</p>

\[f(n) \leq C'n^k\]

<p>进一步得</p>

\[f \in O(n^k).\]

<p>下面假设 $f \in O(n^k)$. 则存在 $K, C$ 使得对于任意 $n&gt;k$:</p>

\[f(n) \leq Cn^k\]

<p>此时取</p>

\[K' = \max(1, K), ~~ C' = \frac{C}{a_k}\]

<p>则有</p>

\[f(n)\leq C'g(n).\]

<p>故双包含证毕.</p>

<p><strong>引理 4</strong></p>
<blockquote>
\[O(n^m) \subsetneq O(n^{m+1}).\]
</blockquote>

<p><strong>引理 5</strong></p>
<blockquote>
\[O(1) \subsetneq O(\log n) \subsetneq O(n).\]
</blockquote>

<p><br /></p>

:ET