I"\Z<h1 id="ch2-process-management">Ch2 Process Management</h1>

<h2 id="1-definition-of-process">1. Definition of Process</h2>
<p><strong>Definition: Process</strong></p>
<blockquote>
  <p>A computer program may be defined as the set of instructions which the computer is to follow to perform some computation.</p>

  <p>However, when a program executes it needs more information. In practice there are often several attributes associated with this particular, executing copy of a program, such as who ‘owns’ it, which files it is using etc. The executing program, together with this information is typically called a <strong>process</strong>.</p>
</blockquote>

<p>A typical operating system will allow multiple simultaneous processes. Most will allow the processes to be unaware of each other’s presence, unless the processes specifically want to cooperate. Each process has its own <strong>context</strong> so we may be able to run <strong>two or more copies</strong> of the same program on the same machine at the same time without them interfering with each other.</p>

<p>Most of the process’ context will be kept in memory. A process will have some <strong>address space</strong> – possibly contiguous addresses, possibly fragmented into several logical segments – which it can use to hold its instructions and variables. This will not encompass all the memory on the machine. <br />
The operating system will also hold some <strong>private information</strong> about the process, typically in a process control block, which may keep track of the various resources ‘owned’ by this process.</p>

<p><strong>Definition: Context</strong></p>
<blockquote>
  <p>An executing process will have a particular <strong>context</strong>. This is the <strong>environment in which it operates, and includes its variables</strong> and the resources which it ‘owns’.</p>
</blockquote>

<p>Register values are part of the process’ context; thus they require saving (in some reserved memory, by the OS) whenever the running process changes.</p>

<p>A process’ <strong>full context</strong> includes:</p>

<ul>
  <li>state held within the processor (‘registers’ etc.).</li>
  <li>the memory management page tables.</li>
  <li>a list of resources owned by that process.</li>
  <li>any specific cached information</li>
</ul>

<p><strong>Definition: PCB (Process Control Block)</strong></p>
<blockquote>
  <p><strong>The control block</strong> is the operating system’s ‘definition’ of a process. It holds information about a process, such as its identifier (‘PID’ in Unix) and its priority.</p>
</blockquote>

<p>It will also hold (or point to) the parts of the process’ context which are preserved when the process is not actively running.</p>

<p>The PCB is <strong>another example of metadata</strong> – in this case describing the process.</p>

<p><img src="https://wiki.cs.manchester.ac.uk/COMP15212/images/0/00/PCB.png" alt="" /></p>

<p><br /></p>

<h3 id="11-unix-process-structure">1.1 Unix Process Structure</h3>
<p>In Unix-like systems there is a hierarchy of processes, in that each process has (or once had) a parent process.</p>

<p><img src="https://wiki.cs.manchester.ac.uk/COMP15212/images/d/d9/Pstree.png" alt="" /></p>

<p>At boot time the first process (number 0) ‘forks’ the init process before becoming the idle process.</p>

<p>init goes on to create “child” processes. The OS maintains information on the parent (in the process’ PCB).</p>

<p>There is a special relationship in that a parent can keep track of its children and children can always enquire who their parent is.</p>

<p><strong>Definition: fork()</strong></p>
<blockquote>
  <p><strong>fork()</strong> is the means by which a <strong>Unix process creates another process</strong>. It is a system call which is <strong>called once but returns twice</strong> – once in the calling process and again in a nearly identical copy of that code (but in a separate process).</p>
</blockquote>

<p><strong>Definition: Orphans</strong></p>
<blockquote>
  <p>If a parent expires before its children, the children are called <strong>Orphans</strong>, and ‘adopted’ by init.</p>
</blockquote>

<p><strong>Definition: Zombies</strong></p>
<blockquote>
  <p><strong>Zombies</strong> are child processes which have terminated but this <strong>hasn’t been observed</strong> by their (real or adoptive) parent.</p>

  <p>The OS retains the ‘dead’ process’ details until the parent <strong>synchronises</strong> with it. Zombies which persist probably indicate a bug of some sort.</p>
</blockquote>

<h3 id="12-process-states">1.2 Process States</h3>

<p>A <strong>simple</strong> computer has one processor so it can execute one process at any time. You may want to do more than this and a ‘multi-tasking’ operating system provides the illusion that you can via time-slicing.</p>

<p>If there is more than one process to execute, one is chosen and any others are queued waiting for a turn. After some time of execution the executing process may be moved back into the queue so that another process can proceed. The exact basis on which the processes are chosen for running or eviction depends on the <strong>particular scheduler</strong> employed.</p>

<p>Basically, a process may have the following three kind of states:</p>

<ol>
  <li>A process which is <strong>ready</strong> may:
    <ul>
      <li>be scheduled by the OS and set running</li>
      <li>be terminated by some outside influence (e.g. ‘kill’)</li>
    </ul>
  </li>
  <li>A process which is <strong>running</strong> may:
    <ul>
      <li>deliberately yield execution (becoming ready)</li>
      <li>terminate itself (job complete)</li>
      <li>be terminated by some outside influence (e.g. ‘kill’)</li>
    </ul>
  </li>
  <li>A process which is <strong>blocked</strong> may:
    <ul>
      <li>become unblocked and become ready (e.g. because …)
        <ul>
          <li>I/O has become ready</li>
          <li>time has advanced</li>
        </ul>
      </li>
      <li>be terminated by some outside influence (e.g. ‘kill’)</li>
    </ul>
  </li>
</ol>

<p><img src="https://wiki.cs.manchester.ac.uk/COMP15212/images/1/13/Process_states.png" alt="" /></p>

<p>Any number of processes can be ‘Ready’ to be run at a given time. There is therefore a <strong>ready queue</strong> of processors waiting their turn for scheduling.</p>

<p>Any number of processes can be ‘Blocked’ at a given time. However processes can be blocked for <strong>different reasons</strong>.</p>

<p>For an communications process, such as a pipe an input or an output should only ever ‘belong’ to a single process, so (at most) one task will block waiting for that. On the other hand, some blocks (e.g. sleep()) may also have a queue of waiting processes.</p>

<h2 id="2-threads-and-multi-threading">2 Threads and Multi-Threading</h2>

<p>A thread of execution is a single, sequential series of machine instructions.</p>

<h3 id="21-threads">2.1 Threads</h3>
<p><strong>Definition: Thread</strong></p>
<blockquote>
  <p>Threads are basically similar to processes. Threads belong within processes. The simple model is to have one thread in each process but <strong>any process could have multiple threads</strong>.</p>
</blockquote>

<p>Threads share <strong>most of their context</strong> although they will each have some private data space such as processor registers and their own stack.</p>

<p><img src="https://wiki.cs.manchester.ac.uk/COMP15212/images/b/b3/Thread_process.png" alt="" /></p>

<p>There are several differences between <strong>processes</strong> and <strong>threads</strong>:</p>
<ol>
  <li>threads within the same process <strong>share access to resources</strong> such as peripheral devices and files.</li>
  <li>threads within the same process <strong>share a virtual memory map</strong>.</li>
  <li>switching threads within the same process is considerably cheaper (faster) than switching processes because there is (much) <strong>less context</strong> to switch.</li>
  <li>it is also <strong>faster</strong> to <strong>create or destroy</strong> a thread than to create or destroy a process.</li>
</ol>

<p>Just like processes, each thread has its own state: <code class="language-plaintext highlighter-rouge">running</code>, <code class="language-plaintext highlighter-rouge">ready</code> or <code class="language-plaintext highlighter-rouge">blocked</code>.</p>

<p><img src="https://wiki.cs.manchester.ac.uk/COMP15212/images/7/77/Thread_layers.png" alt="" /></p>

<p>Threads may be managed by <strong>the operating system scheduler</strong> or, at user level, by a <strong>separate scheduler in the application</strong>.</p>

<p>Thread management <strong>by a user</strong> typically allows <strong>faster thread switching</strong> (no need for (slow) system calls) and the scheduling can be tailored to the application, with <strong>more predictable behaviour</strong>.</p>

<p>A potential disadvantage in managing threads at user-level is that it requires its <strong>own management software</strong> for creating, tracking, switching, synchronising, destroying threads. This may be in the form of an imported library.</p>

<p>Thread management by the operating system allows threads to be <strong>scheduled in a similar fashion</strong> to <strong>any process</strong>. Context switching (within the same process) can be cheaper than process switching but is still likely to be <strong>more expensive</strong> than leaving it to the application.</p>

<h3 id="22-multi-threading">2.2 Multi-Threading</h3>
<p><strong>Definition: Milti-Threading</strong></p>
<blockquote>
  <p><strong>Multi-threading</strong> is the term loosely applied both to running multiple threads and multiple processes on a single machine.</p>
</blockquote>

<p>it is most usually used when referring to threads which belong to the same program and which cooperate closely.</p>

<p>Multi-threaded code can offer some significant advantages to the programmer:</p>
<ol>
  <li>enabling <strong>simpler source code</strong>.</li>
  <li><strong>easier to decompose a problem</strong> into semi-independent units which operate in their own way in their own time.</li>
  <li>threading the code will lead to <strong>higher performance</strong>.</li>
</ol>

<p>Multi-Threading also has its drawback:</p>

<p>The biggest drawback to multithreading is that it is more <strong>difficult to program</strong> this way:</p>

<p>‘Traditional’ programming tends to be putting operations into a <strong>sequence</strong>.</p>

<p>However, in multi-threading programming, when operations are deliberately allowed to happen <strong>in an unpredictable order</strong> people can get <strong>confused</strong>.</p>

<p>This, in turn, can lead to subtle faults, which only evidence intermittently, <strong>making debugging difficult</strong>.</p>

<p>It is necessary to ensure that <strong>all dependencies in the code are guaranteed</strong>:</p>

<blockquote>
  <p>i.e. it is certain that one thread has reached a particular point (e.g. the disk has provided the data) before another thread continues past a point of its own.</p>
</blockquote>

<p>On the other hand two (or more) threads must <strong>not act in a way</strong> where they will <strong>stop each other from proceeding</strong> – a condition known as <strong>deadlock</strong>.</p>

<p><strong>Definition: Deadlock</strong></p>
<blockquote>
  <p><strong>Deadlock</strong> is a situation where <strong>progress cannot be made … ever again</strong>.<br />
A process can deadlock if it <strong>competes for resources with another process</strong> (or processes).</p>
</blockquote>

<p><strong>Definition: Starvation</strong></p>
<blockquote>
  <p>(Resource) starvation is often linked with deadlocks in that it can (potentially) cause progress to stop. However this is really <strong>more of a scheduling issue</strong>.</p>

  <p>A process is ‘starved’ if it <strong>can’t get some resource(s) which it needs to proceed</strong>. This <strong>can be caused by other processes competing for (and winning) the resource</strong>.</p>
</blockquote>

<h3 id="23-interprocess-communication">2.3 Interprocess Communication</h3>

<p>multiprocessing is a resource which can be exploited by the programmer and then there is often the need to <strong>communicate between processes</strong>.</p>

<p>As <strong>each process has its own context</strong> – deliberately <strong>protected from</strong> other processes – interprocess communication requires some form of <strong>operating system intervention</strong>.</p>

<p>There are several major categories to communicate between processes:</p>

<ol>
  <li>
    <p><strong>Shared Memory</strong><br />
 If processes or threads <strong>share some RAM</strong> they can obviously communicate using that. As the processes run asynchronously some form of protocol is usually necessary to <strong>ensure data are seen correctly</strong>.</p>

    <p>A simple protocol could be to have <strong>an array of data and a Boolean flag</strong>. When the flag is FALSE, one process (<strong>the “producer”</strong>) can write into the array. When it has completed this it can write a TRUE to the flag. It must then wait until the flag is FALSE before writing again.</p>

    <p>Conversely, the other process (<strong>the “consumer”</strong>) waits for the flag to be TRUE before proceeding. It then knows that there is valid data and it can interpret this. When this is complete it can <strong>set the flag to FALSE</strong> so that more data can be sent.</p>
  </li>
  <li>
    <p><strong>Files</strong><br />
Processes may communicate by altering file-system contents, which are visible to all processes on the system which have the permission to read them. <br /></p>

    <p>Using the file system is convenient for large quantities of data but the overheads are significant for ‘day-to-day’ operations.</p>
  </li>
  <li>
    <p><strong>Messages</strong><br />
Messages are data ‘blocks’ sent from process to process. They are clearly a means of communicating where there is <strong>no memory or file-store in common</strong> although messages can be passed on the same machine too.</p>

    <p>When passing a message, the producer and consumer must <strong>coordinate on a one-to-one basis</strong>: one message sent, one message received.</p>

    <p>It can be important to know <strong>whether message passing is synchronised or not</strong>.<br />
 In a synchronous message passing system to ‘output’ and the ‘input’ operations are compelled to meet. <br />
 Whichever arrives at the rendezvous first is blocked until the other arrives. This is typically <strong>less efficient</strong> in processor time but can <strong>give more information/control</strong> over process sequencing.</p>

    <p><img src="https://wiki.cs.manchester.ac.uk/COMP15212/images/a/a7/Message_sync.png" alt="" /></p>

    <p>With <strong>asynchronous</strong> message passing there is the concept of elasticity, where <strong>a message queue</strong> is maintained so the producer may get some ‘distance’ ahead of the consumer.<br />
 This gives greater freedom of operation but <strong>less control</strong> over timing. The communication is much like a pipe although the messages will usually have some recognised structure.</p>

    <p><img src="https://wiki.cs.manchester.ac.uk/COMP15212/images/b/bb/Message_async.png" alt="" /></p>
  </li>
  <li>
    <p><strong>Signals</strong><br />
The term “signal” is used in different ways.</p>

    <ul>
      <li>
        <p>Wait &amp; signal:<br /> a means of synchronisation where processes (or threads) <strong>block and unblock</strong> others.</p>
      </li>
      <li>
        <p>In Unix (at least) “Signal” is used as a term for <strong>asynchronous events</strong>. These events are similar in principle to interrupts although they are software generated, mediated by the OS.</p>
      </li>
      <li>
        <p>In terms of interprocess communication, signal calls can <strong>request a process to stop or start</strong>, <strong>indicate anomalies</strong> etc. A ‘familiar’ signal example is probably pressing ^C in a shell to interrupt a running process.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Pipes</strong><br />
A Unix ‘pipe’ – a concept adopted by other operating systems – is a <strong>FIFO</strong> which can be used to <strong>connect processes</strong>. <br />
One process is able to write into the FIFO; a (presumably) different process can read them. <br />
Ordering is preserved but there is <strong>no data structure</strong> per se.</p>
  </li>
  <li>
    <p><strong>Barriers</strong><br />
A synchronisation barrier is a means of ensuring no process or thread can cause problems by getting too far ahead of others it is working with. <strong>This is not passing data per se, but is still communicating information between processes.</strong></p>

    <p>Imagine running (say) four processes which all do some tasks with unpredictable timing. Before proceeding further it is important that all the tasks are complete. A barrier will provide this assurance.</p>

    <p><img src="https://wiki.cs.manchester.ac.uk/COMP15212/images/e/e0/Sync_barrier.png" alt="" /></p>
  </li>
</ol>

<p><br /></p>

<h2 id="3-process-scheduling--scheduler">3. Process Scheduling &amp; Scheduler</h2>

<p>In a multi-tasking operating system <strong>not all</strong> the processes (tasks) are really running simultaneously; at most the maximum number of running processes equals the number of processor ‘cores’ available.</p>

<p><strong>Definition: Scheduler</strong></p>
<blockquote>
  <p><strong>The scheduler</strong> is the part of an operating system which <strong>decides which process(es) to run</strong> at any given time. <br />
The algorithm(s) used by a scheduler to pick the ‘next’ process are many and varied and can depend on the particular circumstances.</p>
</blockquote>

<p>The approach to scheduling usually <strong>varies according to the purpose</strong> of the computer system – sometimes referred to as a “processing mode”.</p>

<p>Periodically, the scheduler has to select the next process to run. Time-slicing with a simple round-robin algorithm would give an equal share of processor time to all processes which are not blocked. This can be <strong>too simplistic to be useful</strong>. It is often useful to be able to <strong>assign priority to processes</strong> so that some are favoured over others.</p>

<p><strong>Definition: Process Priority</strong><br /></p>
<blockquote>
  <p><strong>Process Priority</strong> is a value set by the user or OS based on the type of the process reflecting its urgency or importance.</p>
</blockquote>

<p>A process’ priority may be set by the user (or the system) in various ways. It may be constant or calculated dynamically.</p>

<p>Priority can be applied in <strong>different ways</strong> too. In a real-time system it probably <strong>dictates that the highest priority</strong> ‘ready’ process runs whilst it can.</p>

<p>In an interactive system, this approach could <strong>prevent lower priority processes proceeding</strong> at all, so the strategy may be different.</p>

<p><img src="https://wiki.cs.manchester.ac.uk/COMP15212/images/d/d6/Priority_timeslicing.png" alt="" /></p>

<p><strong>Definition: Priority Inversion</strong></p>
<blockquote>
  <p>A “priority inversion” is a circumstance where a high priority task is <strong>prevented</strong> from running by a lower priority task.</p>
</blockquote>

<p>There are following possible scenarios for this to happen:</p>

<ol>
  <li>
    <p>A low priority task acquires a mutex.</p>
  </li>
  <li>
    <p>A high priority task pre-empts, tries for the same mutex and blocks.</p>
  </li>
  <li>
    <p>Before the low priority task can release the mutex a medium priority task occupies the processor.</p>
  </li>
</ol>

<p>The high priority task is suspended until the low priority task frees the mutex. Normally this would happen quickly but the low priority task isn’t allowed the chance. The medium priority task – which would normally be pre-empted – hogs the urgently needed resource.</p>

<p><img src="https://wiki.cs.manchester.ac.uk/COMP15212/images/0/01/Priority_inversion.png" alt="" /></p>

<h3 id="31-interactive-processing">3.1 <strong>Interactive processing</strong><br /></h3>
<p>This will be a familiar mode where the user <strong>constantly interacts with the computer</strong> which, nevertheless, occasionally has some time-consuming tasks.<br /> 
Scheduling is arranged to give <strong>reasonable responsiveness</strong> to various jobs as the user changes focus.</p>

<blockquote>
  <p>In interactive systems a common approach is <strong>“round robin”</strong> scheduling. This is an attempt to <strong>give all processes equal ‘turns’</strong> by taking the next process from the front of a FIFO queue whilst appending a de-scheduled process to the back. <br />
This is most obviously applicable when time-slicing, (or cooperative ‘yielding’) when a running process is de-scheduled without being blocked. <br />
The scheduler needs to try to be ‘fair’ to avoid starving any process of a share of processor time, although the details might be influenced by the process’ priority.</p>
</blockquote>

<h3 id="32-real-time-processing">3.2 <strong>Real-time processing</strong><br /></h3>
<p>Real-time computing requires a <strong>guaranteed response with a certain, maximum latency</strong>. Contrary to some opinions, this does not make it fast: in fact it is <strong>essential that the processor is regularly becoming idle</strong> because if it is not it means it hasn’t completed everything it needed to do in time.</p>

<p>Real-time schedulers typically <strong>rely heavily on priority</strong>, with some processes being identified <strong>as more urgent than others</strong> (i.e. low latency is required); these will typically be run in preference to lower priority (but still time-constrained) jobs.</p>

<blockquote>
  <p>Real-time tasks are sometimes (somewhat arbitrarily) divided between “hard” and “soft” constraints:</p>

  <p>A <strong>hard real-time task</strong> is one <strong>where failure to meet a constraint leads to a system failure</strong>.</p>

  <p>A <strong>soft real-time task</strong> could be summarised as one where undue delay leads to annoyance.</p>
</blockquote>

<h3 id="33-batch-processing">3.3 <strong>Batch processing</strong><br /></h3>
<p>Batch scheduling <strong>picks a particular job and completes that before proceeding to the next</strong>. It is therefore <strong>not responsive</strong> to interactions but is efficient at processing. It is often appropriate for <strong>big data processing jobs</strong>.</p>

<blockquote>
  <p>A common approach in batch jobs is <strong>shortest job first</strong>. A simple analysis will show that this finishes more jobs, sooner.</p>
</blockquote>

:ET